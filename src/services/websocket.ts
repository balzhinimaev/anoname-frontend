import io from 'socket.io-client';
import { 
  WebSocketSearchCriteria,
  WebSocketSearchMatched,
  WebSocketSearchStats,
  WebSocketChatMessageReceived,
  WebSocketChatTyping,
  WebSocketChatEnded,
  WebSocketError,
  SearchData
} from '../types';

type SocketType = any; // –ò—Å–ø–æ–ª—å–∑—É–µ–º any –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏ Socket.IO

export class WebSocketService {
  private socket: SocketType | null = null;
  private isConnecting = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;

  // Event handlers
  private onSearchMatchedHandler?: (data: WebSocketSearchMatched) => void;
  private onSearchStatsHandler?: (data: WebSocketSearchStats) => void;
  private onSearchStatusHandler?: (data: any) => void;
  private onChatMessageHandler?: (data: WebSocketChatMessageReceived) => void;
  private onChatTypingHandler?: (data: WebSocketChatTyping) => void;
  private onChatReadHandler?: (data: any) => void;
  private onChatEndedHandler?: (data: WebSocketChatEnded) => void;
  private onChatRatedHandler?: (data: any) => void;
  private onContactRequestHandler?: (data: any) => void;
  private onContactStatusHandler?: (data: any) => void;
  private onErrorHandler?: (error: WebSocketError) => void;
  private onConnectedHandler?: () => void;
  private onDisconnectedHandler?: () => void;

  constructor() {
    this.setupEventListeners();
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  async connect(token: string, serverUrl: string = 'wss://anoname.xyz'): Promise<void> {
    if (this.socket?.connected) {
      console.log('WebSocket —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫:', this.socket.io.uri);
      return;
    }
    
    if (this.isConnecting) {
      console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...');
      return;
    }

    this.isConnecting = true;

    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:', serverUrl);
      
      this.socket = io(serverUrl, {
        transports: ['websocket'],
        auth: {
          token: token
        },
        autoConnect: true,
        reconnection: true,
        reconnectionDelay: this.reconnectDelay,
        reconnectionAttempts: this.maxReconnectAttempts,
        timeout: 20000,
        forceNew: true,
        upgrade: false,
        rememberUpgrade: false
      } as any);

      this.setupSocketListeners();

      return new Promise((resolve, reject) => {
        if (!this.socket) {
          reject(new Error('Failed to create socket'));
          return;
        }

        this.socket.on('connect', () => {
          console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫:', serverUrl);
          console.log('üì° –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π URI —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', this.socket.io.uri);
          console.log('üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:', this.socket.io.engine.transport.name);
          console.log('üîó ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', this.socket.id);
          this.isConnecting = false;
          this.reconnectAttempts = 0;
          this.onConnectedHandler?.();
          resolve();
        });

        this.socket.on('connect_error', (error: any) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket –∫', serverUrl, ':', error);
          console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.description, error.context, error.type);
          console.error('üåê –ü–æ–ø—ã—Ç–∫–∞:', this.reconnectAttempts + 1, '–∏–∑', this.maxReconnectAttempts);
          this.isConnecting = false;
          this.reconnectAttempts++;
          
          if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            reject(new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket ${serverUrl} –ø–æ—Å–ª–µ ${this.maxReconnectAttempts} –ø–æ–ø—ã—Ç–æ–∫`));
          }
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        this.socket.on('disconnect', (reason: any) => {
          console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∏—á–∏–Ω–∞:', reason);
        });

        this.socket.on('reconnect', (attemptNumber: number) => {
          console.log('üîÑ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞:', attemptNumber);
        });

        this.socket.on('reconnect_attempt', (attemptNumber: number) => {
          console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', attemptNumber);
        });

        this.socket.on('reconnect_error', (error: any) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
        });

        this.socket.on('reconnect_failed', () => {
          console.error('üíÄ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket');
        });
      });
    } catch (error) {
      this.isConnecting = false;
      throw error;
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket
  disconnect(): void {
    if (this.socket) {
      console.log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç WebSocket');
      this.socket.disconnect();
      this.socket = null;
    }
    this.isConnecting = false;
    this.reconnectAttempts = 0;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  forceDisconnect(): void {
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket');
    if (this.socket) {
      this.socket.removeAllListeners();
      this.socket.disconnect();
      this.socket = null;
    }
    this.isConnecting = false;
    this.reconnectAttempts = 0;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected(): boolean {
    return this.socket?.connected || false;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π Socket.IO
  private setupSocketListeners(): void {
    if (!this.socket) return;

    // –ü–æ–∏—Å–∫
    this.socket.on('search:matched', (data: WebSocketSearchMatched) => {
      console.log('–ù–∞–π–¥–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä:', data);
      this.onSearchMatchedHandler?.(data);
    });

    this.socket.on('search:stats', (data: WebSocketSearchStats) => {
      this.onSearchStatsHandler?.(data);
    });

    this.socket.on('search:status', (data: any) => {
      console.log('–°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞:', data);
      this.onSearchStatusHandler?.(data);
    });

    this.socket.on('search:expired', () => {
      console.log('–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–æ');
      this.onErrorHandler?.({ message: '–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–æ' });
    });

    // –ß–∞—Ç
    this.socket.on('chat:message', (data: WebSocketChatMessageReceived) => {
      this.onChatMessageHandler?.(data);
    });

    this.socket.on('chat:typing', (data: WebSocketChatTyping) => {
      this.onChatTypingHandler?.(data);
    });

    this.socket.on('chat:read', (data: any) => {
      console.log('–°–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ã:', data);
      this.onChatReadHandler?.(data);
    });

    this.socket.on('chat:ended', (data: WebSocketChatEnded) => {
      console.log('–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:', data);
      this.onChatEndedHandler?.(data);
    });

    this.socket.on('chat:rated', (data: any) => {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞:', data);
      this.onChatRatedHandler?.(data);
    });

    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    this.socket.on('contact:request', (data: any) => {
      console.log('–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞:', data);
      this.onContactRequestHandler?.(data);
    });

    this.socket.on('contact:status', (data: any) => {
      console.log('–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞:', data);
      this.onContactStatusHandler?.(data);
    });

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    this.socket.on('error', (data: WebSocketError) => {
      console.error('WebSocket –æ—à–∏–±–∫–∞:', data);
      this.onErrorHandler?.(data);
    });

    this.socket.on('disconnect', (reason: any) => {
      console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      this.onDisconnectedHandler?.();
    });

    this.socket.on('connection:recovered', () => {
      console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      this.onConnectedHandler?.();
    });
  }

  // === –ü–û–ò–°–ö ===

  // –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  startSearch(searchData: SearchData): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    const criteria: WebSocketSearchCriteria = {
      gender: searchData.myGender === 'any' ? 'male' : searchData.myGender, // WebSocket API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 'any' –¥–ª—è gender
      age: searchData.myAge,
      desiredGender: searchData.targetGender === 'any' ? ['any'] : [searchData.targetGender],
      desiredAgeMin: searchData.targetAgeMin,
      desiredAgeMax: searchData.targetAgeMax,
      useGeolocation: searchData.useLocation,
      ...(searchData.location && {
        location: {
          longitude: searchData.location.longitude,
          latitude: searchData.location.latitude
        }
      })
    };

    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', criteria);
    this.socket.emit('search:start', { criteria });
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫
  cancelSearch(): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    console.log('–û—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫');
    this.socket.emit('search:cancel');
  }

  // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  subscribeToStats(): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    this.socket.emit('search:subscribe_stats');
  }

  // –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  unsubscribeFromStats(): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    this.socket.emit('search:unsubscribe_stats');
  }

  // === –ß–ê–¢ ===

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É
  joinChat(chatId: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    console.log('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É:', chatId);
    this.socket.emit('chat:join', chatId);
  }

  // –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç
  leaveChat(chatId: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    console.log('–ü–æ–∫–∏–¥–∞–µ–º —á–∞—Ç:', chatId);
    this.socket.emit('chat:leave', chatId);
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  sendMessage(chatId: string, content: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    this.socket.emit('chat:message', { chatId, content });
  }

  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞
  sendTyping(chatId: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    this.socket.emit('chat:typing', chatId);
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  markAsRead(chatId: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    this.socket.emit('chat:read', {
      chatId,
      timestamp: new Date()
    });
  }

  // –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç
  endChat(chatId: string, reason?: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    console.log('–ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç:', chatId, '–ø—Ä–∏—á–∏–Ω–∞:', reason);
    this.socket.emit('chat:end', { chatId, reason });
  }

  // –û—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
  rateChat(chatId: string, score: number, comment?: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    if (score < 1 || score > 5) {
      throw new Error('–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5');
    }

    this.socket.emit('chat:rate', { chatId, score, comment });
  }

  // === –ö–û–ù–¢–ê–ö–¢–´ ===

  // –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
  requestContact(to: string, chatId: string): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç:', { to, chatId });
    this.socket.emit('contact:request', { to, chatId });
  }

  // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
  respondToContact(userId: string, status: 'accepted' | 'declined' | 'blocked'): void {
    if (!this.socket?.connected) {
      throw new Error('WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    console.log('–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞:', { userId, status });
    this.socket.emit('contact:respond', { userId, status });
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===

  onSearchMatched(handler: (data: WebSocketSearchMatched) => void): void {
    this.onSearchMatchedHandler = handler;
  }

  onSearchStats(handler: (data: WebSocketSearchStats) => void): void {
    this.onSearchStatsHandler = handler;
  }

  onChatMessage(handler: (data: WebSocketChatMessageReceived) => void): void {
    this.onChatMessageHandler = handler;
  }

  onChatTyping(handler: (data: WebSocketChatTyping) => void): void {
    this.onChatTypingHandler = handler;
  }

  onChatEnded(handler: (data: WebSocketChatEnded) => void): void {
    this.onChatEndedHandler = handler;
  }

  onError(handler: (error: WebSocketError) => void): void {
    this.onErrorHandler = handler;
  }

  onConnected(handler: () => void): void {
    this.onConnectedHandler = handler;
  }

  onDisconnected(handler: () => void): void {
    this.onDisconnectedHandler = handler;
  }

  onSearchStatus(handler: (data: any) => void): void {
    this.onSearchStatusHandler = handler;
  }

  onChatRead(handler: (data: any) => void): void {
    this.onChatReadHandler = handler;
  }

  onChatRated(handler: (data: any) => void): void {
    this.onChatRatedHandler = handler;
  }

  onContactRequest(handler: (data: any) => void): void {
    this.onContactRequestHandler = handler;
  }

  onContactStatus(handler: (data: any) => void): void {
    this.onContactStatusHandler = handler;
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  private setupEventListeners(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
      this.disconnect();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫—Ä—ã—Ç–∞
      } else {
        // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞
        if (!this.isConnected() && !this.isConnecting) {
          // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞
          console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞');
        }
      }
    });
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const websocketService = new WebSocketService();
export default websocketService; 